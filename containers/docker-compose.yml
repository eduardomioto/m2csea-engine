version: '2.3'
services:
  finder:
   build: ./applications/finder
   image: eduardomioto/finder
   container_name: finder
   restart: always
   ports:
     - 19100:19100
   links:
     - "consul"
     - "mysql"
     - "neo4j"
   depends_on:
     - "consul"
     - "neo4j"
   environment:
     - "SPRING_PROFILES_ACTIVE=dev"
  visualizer:
    build:
      context: ./applications/visualizer
    image: eduardomioto/visualizer
    container_name: visualizer
    restart: on-failure
    ports:
      - 7000:80
    links:
      - "consul"
      - "mysql"
      - "finder"
      - "specialist_opinion"      
    depends_on:
      - "finder"
      - "specialist_opinion"
    environment:
      - "NGINX_PORT=80"
    volumes:  
      - ./volumes/visualizer/:/usr/share/nginx/html
  specialist_opinion:
    build:
      context: ./applications/specialist-opinion
    image: eduardomioto/specialist-opinion
    container_name: specialist_opinion
    restart: on-failure
    ports:
      - 19092:19092
    links:
      - "consul"
      - "mysql"
    depends_on:
      - "consul"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
  architecture_probe:
    build: 
      context: ./applications/architecture-probe
    image: eduardomioto/architecture-probe
    container_name: architecture_probe
    restart: on-failure
    ports:
      - 19099:19099
    links:
      - "consul"
      - "sonarqube"
      - "mysql"
    depends_on:
      - "finder"
    environment:
      - "FINDER_URL=finder"
      - "NGINX_PORT=80"
  consul:
    image: "progrium/consul"
    restart: always
    container_name: consul
    hostname: "consul"
    volumes:
      - ./volumes/consul/data:/volumes/data/consul
      - ./volumes/consul/config:/volumes/config/consul
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
      - "8600:8600"
    command: "-server -bootstrap -ui-dir /ui -join=127.0.0.1 "
  neo4j:
    image: library/neo4j
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./volumes/neo4j/:/data/dbms
  access_manager:
    build: 
      context: ./applications/simulated/java/microservice-access-manager-rest
    image: eduardomioto/rest-access-manager
    container_name: access_manager
    restart: on-failure
    mem_limit: 500MB
    ports:
      - "10001:10001"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - "consul"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
      - "JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1"
  basket:
    build: 
      context: ./applications/simulated/java/microservice-basket-rest
    image: eduardomioto/rest-basket
    container_name: basket
    restart: on-failure
    mem_limit: 500MB
    ports:
      - "10003:10003"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - "consul"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
      - "JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1"
  billing:
    build: 
      context: ./applications/simulated/java/microservice-billing-rest
    image: eduardomioto/rest-billing
    restart: on-failure
    mem_limit: 500MB
    container_name: billing
    ports:
      - "10005:10005"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - "consul"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
      - "JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1"
  fare:
    build:
      context: ./applications/simulated/java/microservice-fare-rest
    image: eduardomioto/rest-fare
    restart: on-failure
    mem_limit: 500MB
    container_name: fare
    ports:
      - "10008:10008"
    links:
      - "consul"
      - "mysql"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
      - "JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1"
  inventory:
    build: 
      context: ./applications/simulated/java/microservice-inventory-rest
    image: eduardomioto/rest-inventory
    restart: on-failure
    mem_limit: 500MB
    container_name: inventory
    ports:
      - "10009:10009"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - "consul"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
      - "JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1"
  order:
    build: 
      context: ./applications/simulated/java/microservice-order-rest
    image: eduardomioto/rest-order
    restart: on-failure
    mem_limit: 500MB
    container_name: order
    ports:
      - "10012:10012"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - "consul"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
      - "JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1"
  product:
    build: 
      context: ./applications/simulated/java/microservice-product-rest
    image: eduardomioto/rest-product
    restart: on-failure
    mem_limit: 500MB
    container_name: product
    ports:
      - "10015:10015"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - "consul"
      - "fare"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
      - "JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1"
  user_manager:
    build: 
      context: ./applications/simulated/java/microservice-user-manager-rest
    image: eduardomioto/rest-user-manager
    restart: on-failure
    mem_limit: 500MB
    container_name: user_manager
    ports:
      - "10017:10017"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - "consul"
    environment:
      - "SPRING_PROFILES_ACTIVE=dev"
      - "JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1"
  newsletter:
    build: 
      context: ./applications/simulated/node/microservice-newsletter-rest
    image: eduardomioto/rest-newsletter
    restart: on-failure
    mem_limit: 500MB
    container_name: newsletter
    ports:
      - "10011:10011"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - consul
    environment:
      - CONSUL_URL=consul
  banner:
    build: 
      context: ./applications/simulated/node/microservice-banner-rest
    image: eduardomioto/rest-banner
    restart: always
    mem_limit: 500MB
    container_name: banner
    ports:
      - "10002:10002"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - consul
    environment:
      - CONSUL_URL=consul
  calendar:
    build: 
      context: ./applications/simulated/node/microservice-calendar-rest
    image: eduardomioto/rest-calendar
    restart: always
    mem_limit: 500MB
    container_name: calendar
    ports:
      - "10006:10006"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - consul
    environment:
      - CONSUL_URL=consul
  category:
    build: 
      context: ./applications/simulated/node/microservice-category-rest
    image: eduardomioto/rest-category
    restart: always
    mem_limit: 500MB
    container_name: category
    ports:
      - "10007:10007"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - consul
    environment:
      - CONSUL_URL=consul
    benefits:
    build: 
      context: ./applications/simulated/node/microservice-benefits-rest
    image: eduardomioto/rest-benefits
    restart: on-failure
    mem_limit: 500MB
    container_name: benefits
    ports:
      - "10004:10004"
    links:
      - "consul"
      - "mysql"
    depends_on:
      - consul
    environment:
      - CONSUL_URL=consul
  #acabd57e73d5c90b2970ceb792790df34993f59a    
  sonarqube:
    build:
      context: ./applications/sonar
    restart: unless-stopped
    container_name: sonarqube
  #  command: -Dhttp.proxyHost=proxy.whebdc.com.br -Dhttp.proxyPort=3128 -Dhttp.proxyUser=topologia -Dhttp.proxyPassword=Philips.2017
    environment:
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=v07IGCFCF83Z95NX
      - SONARQUBE_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube
    ports:
      - "9000:9000"
      - "9092:9092"
    volumes:
      - ./volumes/sonarqube/conf:/opt/sonarqube/conf
      - ./volumes/sonarqube/data:/opt/sonarqube/data
      - ./volumes/sonarqube/extensions:/opt/sonarqube/extensions
      - ./volumes/sonarqube/plugins:/opt/sonarqube/lib/bundled-plugins
  postgres:
    image: postgres:10.1
    restart: unless-stopped
    container_name: postgres
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=v07IGCFCF83Z95NX
      - POSTGRES_DB=sonarqube
    volumes:
      -  ./volumes/postgres/:/var/lib/postgresql/data
  mysql:
    image: mysql:5.7
    restart: always
    container_name: mysql
    environment:
      MYSQL_DATABASE: 'mc2sea-metrics'
      MYSQL_USER: 'admin'
      MYSQL_PASSWORD: 'admin'
      MYSQL_ROOT_PASSWORD: 'admin'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      -  ./volumes/mysql/:/var/lib/mysql
  telegraf:
    build: 
      context: ./applications/telegraf
    container_name: telegraf
    ports:
      - 9126:9126
      - 8094:8094
    image: telegraf
    restart: always
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
    hostname: localhost
    volumes:
     - ./applications/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
     - /var/run/docker.sock:/var/run/docker.sock:ro
     - /sys:/rootfs/sys:ro
     - /proc:/rootfs/proc:ro
     - /etc:/rootfs/etc:ro
  prometheus:
    build: 
      context: ./applications/prometheus
    container_name: prometheus
    ports:
      - 8091:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml   
    depends_on:
      - telegraf
networks:
  default:
    external:
      name: m2csea